
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import Node.*;
import Node.Declaration.*;
import Node.Statement.*;
import Node.Expression.*;
import Node.Constant.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\010\000\002\005\002" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\016\000\002" +
    "\013\014\000\002\014\002\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\002\000\002\017\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\005\000\002\021" +
    "\012\000\002\022\002\000\002\022\005\000\002\023\011" +
    "\000\002\024\005\000\002\024\004\000\002\030\003\000" +
    "\002\030\005\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\026\005\000\002\027" +
    "\006\000\002\027\005\000\002\031\003\000\002\031\005" +
    "\000\002\031\004\000\002\031\006\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\004" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\010\014\011\006\013\uffff\014\012\015" +
    "\010\021\uffff\056\013\001\002\000\004\067\254\001\002" +
    "\000\004\002\253\001\002\000\040\005\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\015\ufff8\022\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\055\ufff8\056\ufff8\067\ufff8\001" +
    "\002\000\006\013\ufffc\021\035\001\002\000\040\005\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\022\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\055\ufff7\056\ufff7" +
    "\067\ufff7\001\002\000\046\005\uffff\007\uffff\010\014\011" +
    "\006\012\uffff\013\uffff\014\012\015\010\021\uffff\022\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\055\uffff\056" +
    "\013\067\uffff\001\002\000\040\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\022\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\055\ufff5\056\ufff5\067\ufff5\001\002" +
    "\000\004\067\015\001\002\000\040\005\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\022\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\055\ufff6\056\ufff6\067\ufff6\001" +
    "\002\000\004\031\031\001\002\000\006\053\020\054\017" +
    "\001\002\000\004\067\021\001\002\000\046\005\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\055\ufff9\056\ufff9\067\ufff9\001\002\000\004\031\022" +
    "\001\002\000\014\061\025\062\026\064\024\065\027\066" +
    "\023\001\002\000\006\053\uffea\054\uffea\001\002\000\006" +
    "\053\uffee\054\uffee\001\002\000\006\053\uffec\054\uffec\001" +
    "\002\000\006\053\uffeb\054\uffeb\001\002\000\006\053\uffed" +
    "\054\uffed\001\002\000\006\053\uffef\054\uffef\001\002\000" +
    "\014\061\025\062\026\064\024\065\027\066\023\001\002" +
    "\000\006\053\ufff0\054\ufff0\001\002\000\034\005\ufffe\007" +
    "\ufffe\012\ufffe\013\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\055\ufffe\067\ufffe\001\002\000" +
    "\006\013\ufffc\021\035\001\002\000\004\067\221\001\002" +
    "\000\004\013\037\001\002\000\040\005\uffff\010\014\011" +
    "\006\012\uffff\014\012\015\010\022\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\055\uffff\056\013\067\uffff\001" +
    "\002\000\004\002\001\001\002\000\026\005\051\012\043" +
    "\022\uffe1\024\042\025\055\026\046\027\062\030\044\055" +
    "\061\067\054\001\002\000\004\067\214\001\002\000\024" +
    "\016\070\033\063\051\075\061\067\062\072\064\073\065" +
    "\064\066\066\067\074\001\002\000\024\016\070\033\063" +
    "\051\075\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\004\053\204\001\002\000\024\016\070" +
    "\033\063\051\075\061\067\062\072\064\073\065\064\066" +
    "\066\067\074\001\002\000\004\053\202\001\002\000\004" +
    "\053\201\001\002\000\024\016\070\033\063\051\075\061" +
    "\067\062\072\064\073\065\064\066\066\067\074\001\002" +
    "\000\004\022\164\001\002\000\004\053\163\001\002\000" +
    "\006\016\135\031\161\001\002\000\024\016\070\033\063" +
    "\051\075\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\004\053\157\001\002\000\030\005\051" +
    "\007\uffe1\012\043\022\uffe1\024\042\025\055\026\046\027" +
    "\062\030\044\055\061\067\054\001\002\000\004\053\155" +
    "\001\002\000\024\016\070\033\063\051\075\061\067\062" +
    "\072\064\073\065\064\066\066\067\074\001\002\000\024" +
    "\016\070\033\063\051\075\061\067\062\072\064\073\065" +
    "\064\066\066\067\074\001\002\000\024\016\070\033\063" +
    "\051\075\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\052\006\uffc2\017\uffc2\023\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\053\uffc2\054\uffc2\001\002\000\042\032\103\033" +
    "\100\034\110\035\115\036\106\037\101\040\112\041\104" +
    "\042\111\043\113\044\105\045\107\046\102\047\077\050" +
    "\114\053\uffcd\001\002\000\052\006\uffc1\017\uffc1\023\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\053\uffc1\054\uffc1\001\002\000\052\006" +
    "\uffc5\017\uffc5\023\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5" +
    "\001\002\000\024\016\070\033\063\051\075\061\067\062" +
    "\072\064\073\065\064\066\066\067\074\001\002\000\052" +
    "\006\uffbf\017\uffbf\023\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\053\uffbf\054" +
    "\uffbf\001\002\000\052\006\uffc4\017\uffc4\023\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\053\uffc4\054\uffc4\001\002\000\052\006\uffc3\017" +
    "\uffc3\023\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\001\002" +
    "\000\054\006\uffc0\016\135\017\uffc0\023\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\053\uffc0\054\uffc0\001\002\000\024\016\070\033\063" +
    "\051\075\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\052\006\uffae\017\uffae\023\uffae\032\103" +
    "\033\100\034\110\035\115\036\106\037\101\040\112\041" +
    "\104\042\111\043\113\044\105\045\107\046\102\047\uffae" +
    "\050\uffae\053\uffae\054\uffae\001\002\000\024\016\070\033" +
    "\063\051\075\061\067\062\072\064\073\065\064\066\066" +
    "\067\074\001\002\000\024\016\070\033\063\051\075\061" +
    "\067\062\072\064\073\065\064\066\066\067\074\001\002" +
    "\000\024\016\070\033\063\051\075\061\067\062\072\064" +
    "\073\065\064\066\066\067\074\001\002\000\024\016\070" +
    "\033\063\051\075\061\067\062\072\064\073\065\064\066" +
    "\066\067\074\001\002\000\024\016\070\033\063\051\075" +
    "\061\067\062\072\064\073\065\064\066\066\067\074\001" +
    "\002\000\024\016\070\033\063\051\075\061\067\062\072" +
    "\064\073\065\064\066\066\067\074\001\002\000\024\016" +
    "\070\033\063\051\075\061\067\062\072\064\073\065\064" +
    "\066\066\067\074\001\002\000\024\016\070\033\063\051" +
    "\075\061\067\062\072\064\073\065\064\066\066\067\074" +
    "\001\002\000\024\016\070\033\063\051\075\061\067\062" +
    "\072\064\073\065\064\066\066\067\074\001\002\000\024" +
    "\016\070\033\063\051\075\061\067\062\072\064\073\065" +
    "\064\066\066\067\074\001\002\000\024\016\070\033\063" +
    "\051\075\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\024\016\070\033\063\051\075\061\067" +
    "\062\072\064\073\065\064\066\066\067\074\001\002\000" +
    "\024\016\070\033\063\051\075\061\067\062\072\064\073" +
    "\065\064\066\066\067\074\001\002\000\024\016\070\033" +
    "\063\051\075\061\067\062\072\064\073\065\064\066\066" +
    "\067\074\001\002\000\024\016\070\033\063\051\075\061" +
    "\067\062\072\064\073\065\064\066\066\067\074\001\002" +
    "\000\052\006\uffba\017\uffba\023\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\101\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\053" +
    "\uffba\054\uffba\001\002\000\052\006\uffb6\017\uffb6\023\uffb6" +
    "\032\103\033\100\034\110\035\115\036\106\037\101\040" +
    "\112\041\104\042\111\043\113\044\105\045\107\046\102" +
    "\047\077\050\uffb6\053\uffb6\054\uffb6\001\002\000\036\006" +
    "\uffb3\017\uffb3\023\uffb3\032\103\033\100\034\110\035\115" +
    "\036\106\037\101\040\112\047\uffb3\050\uffb3\053\uffb3\054" +
    "\uffb3\001\002\000\052\006\uffb7\017\uffb7\023\uffb7\032\103" +
    "\033\100\034\110\035\115\036\106\037\101\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\053\uffb7\054\uffb7\001\002\000\036\006\uffb0\017" +
    "\uffb0\023\uffb0\032\103\033\100\034\110\035\115\036\106" +
    "\037\101\040\112\047\uffb0\050\uffb0\053\uffb0\054\uffb0\001" +
    "\002\000\052\006\uffbc\017\uffbc\023\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\101\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\053\uffbc\054\uffbc\001\002\000\036\006\uffb5\017\uffb5\023" +
    "\uffb5\032\103\033\100\034\110\035\115\036\106\037\101" +
    "\040\112\047\uffb5\050\uffb5\053\uffb5\054\uffb5\001\002\000" +
    "\052\006\uffbb\017\uffbb\023\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\101\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\053\uffbb" +
    "\054\uffbb\001\002\000\036\006\uffb2\017\uffb2\023\uffb2\032" +
    "\103\033\100\034\110\035\115\036\106\037\101\040\112" +
    "\047\uffb2\050\uffb2\053\uffb2\054\uffb2\001\002\000\036\006" +
    "\uffb1\017\uffb1\023\uffb1\032\103\033\100\034\110\035\115" +
    "\036\106\037\101\040\112\047\uffb1\050\uffb1\053\uffb1\054" +
    "\uffb1\001\002\000\052\006\uffbe\017\uffbe\023\uffbe\032\uffbe" +
    "\033\uffbe\034\110\035\115\036\106\037\101\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\053\uffbe\054\uffbe\001\002\000\036\006\uffb4\017" +
    "\uffb4\023\uffb4\032\103\033\100\034\110\035\115\036\106" +
    "\037\101\040\112\047\uffb4\050\uffb4\053\uffb4\054\uffb4\001" +
    "\002\000\052\006\uffb8\017\uffb8\023\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\053\uffb8\054\uffb8\001\002\000\052\006\uffbd\017\uffbd\023" +
    "\uffbd\032\uffbd\033\uffbd\034\110\035\115\036\106\037\101" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\053\uffbd\054\uffbd\001\002\000\052" +
    "\006\uffb9\017\uffb9\023\uffb9\032\103\033\100\034\110\035" +
    "\115\036\106\037\101\040\112\041\104\042\111\043\113" +
    "\044\105\045\107\046\102\047\uffb9\050\uffb9\053\uffb9\054" +
    "\uffb9\001\002\000\030\016\070\017\141\033\063\051\075" +
    "\060\140\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\044\017\uffc9\032\103\033\100\034\110" +
    "\035\115\036\106\037\101\040\112\041\104\042\111\043" +
    "\113\044\105\045\107\046\102\047\077\050\114\054\146" +
    "\001\002\000\004\017\145\001\002\000\004\067\142\001" +
    "\002\000\052\006\uffca\017\uffca\023\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\053\uffca\054\uffca\001\002\000\006\017\uffc7\054\143\001" +
    "\002\000\026\016\070\033\063\051\075\060\140\061\067" +
    "\062\072\064\073\065\064\066\066\067\074\001\002\000" +
    "\004\017\uffc6\001\002\000\052\006\uffcb\017\uffcb\023\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\053\uffcb\054\uffcb\001\002\000\026\016" +
    "\070\033\063\051\075\060\140\061\067\062\072\064\073" +
    "\065\064\066\066\067\074\001\002\000\004\017\uffc8\001" +
    "\002\000\042\017\151\032\103\033\100\034\110\035\115" +
    "\036\106\037\101\040\112\041\104\042\111\043\113\044" +
    "\105\045\107\046\102\047\077\050\114\001\002\000\052" +
    "\006\uffad\017\uffad\023\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\053\uffad\054" +
    "\uffad\001\002\000\052\006\uffaf\017\uffaf\023\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\053\uffaf\054\uffaf\001\002\000\042\032\103\033" +
    "\100\034\110\035\115\036\106\037\101\040\112\041\104" +
    "\042\111\043\113\044\105\045\107\046\102\047\077\050" +
    "\114\053\154\001\002\000\030\005\uffd9\007\uffd9\012\uffd9" +
    "\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\055" +
    "\uffd9\067\uffd9\001\002\000\030\005\uffdd\007\uffdd\012\uffdd" +
    "\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\055" +
    "\uffdd\067\uffdd\001\002\000\006\007\uffe0\022\uffe0\001\002" +
    "\000\030\005\uffdc\007\uffdc\012\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\055\uffdc\067\uffdc\001\002" +
    "\000\042\032\103\033\100\034\110\035\115\036\106\037" +
    "\101\040\112\041\104\042\111\043\113\044\105\045\107" +
    "\046\102\047\077\050\114\053\uffd0\001\002\000\024\016" +
    "\070\033\063\051\075\061\067\062\072\064\073\065\064" +
    "\066\066\067\074\001\002\000\042\032\103\033\100\034" +
    "\110\035\115\036\106\037\101\040\112\041\104\042\111" +
    "\043\113\044\105\045\107\046\102\047\077\050\114\053" +
    "\uffcc\001\002\000\030\005\uffdb\007\uffdb\012\uffdb\022\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\055\uffdb\067" +
    "\uffdb\001\002\000\004\013\165\001\002\000\004\053\166" +
    "\001\002\000\004\002\ufffd\001\002\000\042\006\170\032" +
    "\103\033\100\034\110\035\115\036\106\037\101\040\112" +
    "\041\104\042\111\043\113\044\105\045\107\046\102\047" +
    "\077\050\114\001\002\000\042\005\uffff\007\uffff\010\014" +
    "\011\006\012\uffff\014\012\015\010\022\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\055\uffff\056\013\067\uffff" +
    "\001\002\000\030\005\051\007\uffe1\012\043\022\uffe1\024" +
    "\042\025\055\026\046\027\062\030\044\055\061\067\054" +
    "\001\002\000\006\007\173\022\uffd7\001\002\000\040\005" +
    "\uffff\010\014\011\006\012\uffff\014\012\015\010\022\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\055\uffff\056" +
    "\013\067\uffff\001\002\000\004\022\175\001\002\000\004" +
    "\005\176\001\002\000\004\053\uffd8\001\002\000\026\005" +
    "\051\012\043\022\uffe1\024\042\025\055\026\046\027\062" +
    "\030\044\055\061\067\054\001\002\000\004\022\uffd6\001" +
    "\002\000\030\005\uffdf\007\uffdf\012\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\055\uffdf\067\uffdf\001" +
    "\002\000\030\005\uffda\007\uffda\012\uffda\022\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\055\uffda\067\uffda\001" +
    "\002\000\042\032\103\033\100\034\110\035\115\036\106" +
    "\037\101\040\112\041\104\042\111\043\113\044\105\045" +
    "\107\046\102\047\077\050\114\053\uffcf\001\002\000\030" +
    "\005\uffde\007\uffde\012\uffde\022\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\055\uffde\067\uffde\001\002\000\042" +
    "\032\103\033\100\034\110\035\115\036\106\037\101\040" +
    "\112\041\104\042\111\043\113\044\105\045\107\046\102" +
    "\047\077\050\114\053\uffce\001\002\000\042\023\207\032" +
    "\103\033\100\034\110\035\115\036\106\037\101\040\112" +
    "\041\104\042\111\043\113\044\105\045\107\046\102\047" +
    "\077\050\114\001\002\000\040\005\uffff\010\014\011\006" +
    "\012\uffff\014\012\015\010\022\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\055\uffff\056\013\067\uffff\001\002" +
    "\000\026\005\051\012\043\022\uffe1\024\042\025\055\026" +
    "\046\027\062\030\044\055\061\067\054\001\002\000\004" +
    "\022\212\001\002\000\004\023\213\001\002\000\004\053" +
    "\uffd5\001\002\000\030\016\uffd2\033\uffd2\051\uffd2\053\uffd2" +
    "\054\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\001\002\000\030\016\070\033\063\051\075\053\uffd3" +
    "\054\217\061\067\062\072\064\073\065\064\066\066\067" +
    "\074\001\002\000\042\032\103\033\100\034\110\035\115" +
    "\036\106\037\101\040\112\041\104\042\111\043\113\044" +
    "\105\045\107\046\102\047\077\050\114\053\uffd4\001\002" +
    "\000\004\067\220\001\002\000\030\016\uffd1\033\uffd1\051" +
    "\uffd1\053\uffd1\054\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\001\002\000\004\016\222\001\002\000" +
    "\016\010\014\011\006\014\012\015\010\017\uffe7\057\227" +
    "\001\002\000\004\017\235\001\002\000\004\067\234\001" +
    "\002\000\006\017\uffe5\054\uffe5\001\002\000\006\017\uffe6" +
    "\054\232\001\002\000\012\010\014\011\006\014\012\015" +
    "\010\001\002\000\004\067\231\001\002\000\006\017\uffe2" +
    "\054\uffe2\001\002\000\014\010\014\011\006\014\012\015" +
    "\010\057\227\001\002\000\006\017\uffe4\054\uffe4\001\002" +
    "\000\006\017\uffe3\054\uffe3\001\002\000\042\005\uffff\010" +
    "\014\011\006\012\uffff\014\012\015\010\020\237\022\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\055\uffff\056" +
    "\013\067\uffff\001\002\000\026\005\051\012\043\022\uffe1" +
    "\024\042\025\055\026\046\027\062\030\044\055\061\067" +
    "\054\001\002\000\012\010\014\011\006\014\012\015\010" +
    "\001\002\000\040\005\uffff\010\014\011\006\012\uffff\014" +
    "\012\015\010\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\055\uffff\056\013\067\uffff\001\002\000\026\005" +
    "\051\012\043\022\uffe1\024\042\025\055\026\046\027\062" +
    "\030\044\055\061\067\054\001\002\000\004\022\243\001" +
    "\002\000\004\021\244\001\002\000\004\053\245\001\002" +
    "\000\006\013\uffe9\021\uffe9\001\002\000\004\022\247\001" +
    "\002\000\004\021\250\001\002\000\004\053\251\001\002" +
    "\000\006\013\uffe8\021\uffe8\001\002\000\004\013\ufffb\001" +
    "\002\000\004\002\000\001\002\000\010\031\263\053\ufff4" +
    "\054\ufff4\001\002\000\006\053\257\054\256\001\002\000" +
    "\004\067\260\001\002\000\046\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\021\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\055\ufffa" +
    "\056\ufffa\067\ufffa\001\002\000\010\031\261\053\ufff3\054" +
    "\ufff3\001\002\000\024\016\070\033\063\051\075\061\067" +
    "\062\072\064\073\065\064\066\066\067\074\001\002\000" +
    "\044\032\103\033\100\034\110\035\115\036\106\037\101" +
    "\040\112\041\104\042\111\043\113\044\105\045\107\046" +
    "\102\047\077\050\114\053\ufff1\054\ufff1\001\002\000\024" +
    "\016\070\033\063\051\075\061\067\062\072\064\073\065" +
    "\064\066\066\067\074\001\002\000\044\032\103\033\100" +
    "\034\110\035\115\036\106\037\101\040\112\041\104\042" +
    "\111\043\113\044\105\045\107\046\102\047\077\050\114" +
    "\053\ufff2\054\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\004\003\006\006\010\007\003\001" +
    "\001\000\004\010\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\035\013\033\001\001\000\002\001" +
    "\001\000\010\003\032\006\010\007\003\001\001\000\002" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\251\013\033\001\001\000\002\001\001\000\004\004" +
    "\037\001\001\000\010\003\040\006\010\007\003\001\001" +
    "\000\002\001\001\000\022\017\051\020\056\021\047\023" +
    "\044\024\057\025\055\026\052\027\046\001\001\000\004" +
    "\030\214\001\001\000\006\027\070\032\205\001\001\000" +
    "\006\027\070\032\204\001\001\000\002\001\001\000\006" +
    "\027\070\032\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\070\032\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\070\032" +
    "\157\001\001\000\002\001\001\000\022\017\155\020\056" +
    "\021\047\023\044\024\057\025\055\026\052\027\046\001" +
    "\001\000\002\001\001\000\006\027\070\032\152\001\001" +
    "\000\006\027\070\032\064\001\001\000\006\027\070\032" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\070\032\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\070\032\075\001\001\000" +
    "\002\001\001\000\006\027\070\032\133\001\001\000\006" +
    "\027\070\032\132\001\001\000\006\027\070\032\131\001" +
    "\001\000\006\027\070\032\130\001\001\000\006\027\070" +
    "\032\127\001\001\000\006\027\070\032\126\001\001\000" +
    "\006\027\070\032\125\001\001\000\006\027\070\032\124" +
    "\001\001\000\006\027\070\032\123\001\001\000\006\027" +
    "\070\032\122\001\001\000\006\027\070\032\121\001\001" +
    "\000\006\027\070\032\120\001\001\000\006\027\070\032" +
    "\117\001\001\000\006\027\070\032\116\001\001\000\006" +
    "\027\070\032\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\070\031\136\032\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\070\031\143\032\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\070\031\146\032\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\070\032" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\170\006\010\007\003\001\001\000\022" +
    "\017\171\020\056\021\047\023\044\024\057\025\055\026" +
    "\052\027\046\001\001\000\004\022\173\001\001\000\010" +
    "\003\176\006\010\007\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\177\020\056" +
    "\021\047\023\044\024\057\025\055\026\052\027\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\207\006\010\007\003\001\001" +
    "\000\022\017\210\020\056\021\047\023\044\024\057\025" +
    "\055\026\052\027\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\070\032\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\223\014" +
    "\222\015\225\016\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\223\016\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\235\006\010\007\003\001\001\000\022" +
    "\017\245\020\056\021\047\023\044\024\057\025\055\026" +
    "\052\027\046\001\001\000\004\007\237\001\001\000\010" +
    "\003\240\006\010\007\003\001\001\000\022\017\241\020" +
    "\056\021\047\023\044\024\057\025\055\026\052\027\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\070\032\261\001\001\000\002\001\001\000\006\027\070" +
    "\032\263\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramOp RESULT =null;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FunOp> listFun = (ArrayList<FunOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainOp main = (MainOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramOp(listVar, listFun, main);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp var = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listVar.add(var); RESULT = listVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              MainOp RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new MainOp(varList, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              ArrayList<FunOp> RESULT =null;
		 RESULT = new ArrayList<FunOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              ArrayList<FunOp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp f = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FunOp> listFun = (ArrayList<FunOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listFun.add(f); RESULT = listFun; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(t, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitObblOp list = (IdListInitObblOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp(TypeOp.Type.INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp(TypeOp.Type.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp(TypeOp.Type.REAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp(TypeOp.Type.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              IdListInitOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                   HashMap<String,Expression> list = new HashMap<String,Expression>();
                                        list.put(id,null);
                                        RESULT = new IdListInitOp(list);
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.put(id,null); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 HashMap<String,Expression> list = new HashMap<String,Expression>();
                                             list.put(id,exp);
                                             RESULT = new IdListInitOp(list);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.put(id,exp); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              IdListInitObblOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IConstant c = (IConstant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  HashMap<String,IConstant> list = new HashMap<String,IConstant>();
                                                 list.put(id,c);
                                                 RESULT = new IdListInitObblOp(list);
                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              IdListInitObblOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitObblOp list = (IdListInitObblOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IConstant c = (IConstant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.put(id,c); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              IConstant RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int integerConst = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer_Const(integerConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              IConstant RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double realConst = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Real_Const(realConst);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              IConstant RESULT =null;
		 RESULT = new Boolean_Const(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              IConstant RESULT =null;
		 RESULT = new Boolean_Const(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              IConstant RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String_Const(stringConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int listParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int listParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParDeclListOp listPar = (ParDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Statement> listStat = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new FunOp(new ID(id),t, listVar, listPar, listStat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParDeclListOp listPar = (ParDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Statement> listStat = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new FunOp(new ID(id),listVar, listPar, listStat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= 
            {
              ParDeclListOp RESULT =null;
		RESULT = new ParDeclListOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ParDeclListOp RESULT =null;
		int listParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> listPar = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclListOp(listPar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp decl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>(); RESULT.add(decl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int listParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOp> listPar = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp decl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listPar.add(decl); RESULT = listPar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= Type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp(ParDeclOp.ParType.IN,t, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= OUT Type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp(ParDeclOp.ParType.OUT,t, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> listStat = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listStat.add(st); RESULT = listStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatOp stat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileStatOp stat = (WhileStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStatOp stat = (ReadStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStatOp stat = (WriteStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatOp stat = (AssignStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallFun SEMI 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallFunOp stat = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new ReturnExpOp(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseStatOp els = (ElseStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new IfStatOp(exp, listVar, statList, els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              ElseStatOp RESULT =null;
		RESULT = new ElseStatOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE VarDeclList StatList 
            {
              ElseStatOp RESULT =null;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> listStat = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseStatOp(listVar, listStat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VarDeclOp> listVar = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WhileStatOp(exp, listVar, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReadStat ::= READ IdList Expr 
            {
              ReadStatOp RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ID> listId = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStatOp(listId, exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList 
            {
              ReadStatOp RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ID> listId = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStatOp(listId);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdList ::= ID 
            {
              ArrayList<ID> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ID>(); RESULT.add(new ID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdList ::= IdList COMMA ID 
            {
              ArrayList<ID> RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ID> listId = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listId.add(new ID(id)); RESULT = listId; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE Expr 
            {
              WriteStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatOp(WriteStatOp.TypeWrite.WRITE,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITELN Expr 
            {
              WriteStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatOp(WriteStatOp.TypeWrite.WRITELN,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITET Expr 
            {
              WriteStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatOp(WriteStatOp.TypeWrite.WRITET,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITEB Expr 
            {
              WriteStatOp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatOp(WriteStatOp.TypeWrite.WRITEB,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatOp(new ID(id), expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expression> exprList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunOp(new ID(id), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFun ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunOp(new ID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= Expr 
            {
              ArrayList<Expression> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expression> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> exprList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.add(expr); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= OUTPAR ID 
            {
              ArrayList<Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); ID idPar =new ID(id); idPar.setOutPar(true);  RESULT.add(idPar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ArrayList<Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> exprList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID idPar =new ID(id); idPar.setOutPar(true); exprList.add(idPar); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new Boolean_Const(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new Boolean_Const(false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INTEGER_CONST 
            {
              Expression RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int integerConst = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer_Const(integerConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= REAL_CONST 
            {
              Expression RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double realConst = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Real_Const(realConst);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= STRING_CONST 
            {
              Expression RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String_Const(stringConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= CallFun 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp call = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr PLUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.AddOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.DiffOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr TIMES Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.MulOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIV Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.DivOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr DIVINT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.DivIntOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr AND Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.AndOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr POW Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.PowOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.StrCatOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.OrOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr GT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.GTOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr GE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.GEOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr LT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.LTOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr LE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.LEOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr EQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.EQOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr NE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOperation(BinaryOperation.BinaryOperationType.NEOp, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOperation(UnaryOperation.UnaryOperationType.UminusOp, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOperation(UnaryOperation.UnaryOperationType.NotOp, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LPAR Expr RPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
